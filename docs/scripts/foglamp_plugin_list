#!/usr/bin/env bash

function table {
	list="$1"
	title=$2
	tableType=$3
	echo ".. list-table:: ${title}" >> $output
	echo "    :widths: 20 50" >> $output
	echo "    :header-rows: 1" >> $output
	echo "" >> $output
	echo "    * - Name" >> $output
	echo "      - Description" >> $output
	for repo in ${list}
	do
		product=`echo ${repo} | sed -e 's/-.*//'`
		if [[ ${product} == "foglamp" ]]; then repo_list=${dianomicRepos}; else repo_list=${fledgeRepos}; fi
		type=`echo ${repo} | sed -e 's/fledge-//' -e 's/foglamp-//' -e 's/-.*//'`
		name=`echo ${repo} | sed -e 's/fledge-//' -e 's/foglamp-//' -e "s/${type}-//"`
		if [[ "${type}" = "${tableType}" ]]; then
	        description=`echo ${repo_list} | python3 -c 'import json,sys;repos=json.load(sys.stdin);fRepo = [r for r in repos if r["name"] == "'${repo}'" ];print(fRepo[0]["description"])'`
			description=`echo ${description} | sed -e 's/Fledge/FogLAMP/g' | sed -e 's/fledge/foglamp/g'`
			echo "    * - ${name}" >> $output
			echo "      - ${description}" >> $output
		fi
	done
	echo "" >> $output
}

if [[ ! -f ~/.gittoken ]]; then
	echo "You must have a git access token in the file ~/.gittoken"
	exit 1
fi

output=$1
rm -f $output
token=`cat ~/.gittoken`
header="Authorization: token ${token}"
fledgeRepos=`curl -s -H "$header" https://api.github.com/orgs/fledge-iot/repos\?per_page=100`
fledgeRepoNames=`echo ${fledgeRepos} | python3 -c 'import json,sys;repos=json.load(sys.stdin);fRepos = [r["name"] for r in repos];print("\n".join(fRepos))' | sort -f`
dianomicRepos=`curl -s -H "${header}" https://api.github.com/orgs/dianomic/repos\?per_page=100`
dianomicRepoNames=`echo ${dianomicRepos} | python3 -c 'import json,sys;repos=json.load(sys.stdin);valid_repos_prefix=["foglamp-south-","foglamp-north-","foglamp-filter-","foglamp-notify-","foglamp-rule-"];exclude_plugins=["foglamp-south-cc2650asyn","foglamp-south-esp8266","foglamp-south-mqtt","foglamp-south-coral-people","foglamp-south-coral-classify","foglamp-south-raspi-classify","foglamp-south-coral-object-detection","foglamp-south-coral-people-image","foglamp-south-image-classifier","foglamp-south-wind_sensors","foglamp-north-piserver","foglamp-north-mqtt","foglamp-north-gcp","foglamp-north-gcp-gateway","foglamp-north-Azure-IoT-Hub"];fRepos = [r["name"] for r in repos if any(rp in r["name"] for rp in valid_repos_prefix) and r["name"] not in exclude_plugins];print("\n".join(fRepos))' | sort -f`
REPOSITORIES=`echo ${fledgeRepoNames} ${dianomicRepoNames} | sort`
echo ${REPOSITORIES}

cat >> $output << EOF1
FogLAMP Plugins
===============

The following set of plugins are available for FogLAMP. These plugins
extend the functionality by adding new sources of data, new destinations,
processing filters that can enhance or modify the data, rules for
notification delivery and notification delivery mechanisms.

EOF1
cat >>$output << EOF2
South Plugins
-------------

South plugins add new ways to get data into FogLAMP, a number of south
plugins are available ready built or users may add new south plugins of
their own by writing them in Python or C/C++.

EOF2
table "$REPOSITORIES" "FogLAMP South Plugins" south
cat >>$output << EOF3

North Plugins
-------------

North plugins add new destinations to which data may be sent by FogLAMP. A
number of north plugins are available ready built or users may add new
north plugins of their own by writing them in Python or C/C++.

EOF3
table "$REPOSITORIES" "FogLAMP North Plugins" north
cat >>$output << EOF4

Filter Plugins
--------------

Filter plugins add new ways in which data may be modified, enhanced
or cleaned as part of the ingress via a south service or egress to a
destination system. A number of north plugins are available ready built
or users may add new north plugins of their own by writing them in Python
or C/C++.

It is also possible, using particular filters, to supply expressions
or script snippets that can operate on the data as well. This provides a
simple way to process the data in FogLAMP as it is read from devices or
written to destination systems.

EOF4
table "$REPOSITORIES" "FogLAMP Filter Plugins" filter
cat >>$output << EOF5

Notification Rule Plugins
-------------------------

Notification rule plugins provide the logic that is used by the
notification service to determine if a condition has been met that should
trigger or clear that condition and hence send a notification. A number of
notification plugins are available as standard, however as with any plugin the
user is able to write new plugins in Python or C/C++ to extend the set of
notification rules.

EOF5
table "$REPOSITORIES" "FogLAMP Notification Rule Plugins" rule
cat >>$output << EOF6

Notification Delivery Plugins
-----------------------------

Notification delivery plugins provide the mechanisms to deliver the
notification messages to the systems that will receive them.  A number
of notification delivery plugins are available as standard, however as
with any plugin the user is able to write new plugins in Python or C/C++
to extend the set of notification rules.

EOF6
table "$REPOSITORIES" "FogLAMP Notification Delivery Plugins" notify
